
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Выборка = Документы.ПриходнаяНакладная.Выбрать(,, Новый Структура("Автор", Справочники.Сотрудники.НайтиПоНаименованию("Иванов И.А.")));
	
//&НаСервереБезКонтекста
//Процедура РазрешитьДоступODATA()
	МДанные = Новый Массив();
	//МДанные.Добавить("Справочник.Сотрудники");
	//МДанные.Добавить("Справочник.Должности");
	//МДанные.Добавить("Справочник.Поставщики");
	МДанные.Добавить("Документ.ПриходнаяНакладная");
	//МДанные.Добавить("РегистрСведений.ЦеныТоваров");
	МДанные.Добавить("Справочник.Номенклатура");
	УстановитьСоставСтандартногоИнтерфейсаOData(МДанные);
//КонецПроцедуры
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанные(Команда)
	// Сформировать строку URL.
	АдресРесурса = СокрЛП(Адрес);
	// Отправить запрос на сервер.
	ВыполнитьЗапрос("GET", АдресРесурса, "");
КонецПроцедуры

//&НаКлиенте
//Процедура ВыполнитьЗапрос(ИмяМетода, АдресРесурса, СтрокаТелаЗапроса)
//	Сообщение = Новый СообщениеПользователю;
//	// Установить имя сервера.
//	СерверИсточник = "localhost";
//	Попытка
//		// Создать HTTP-соединение с сервером localhost.
//		HTTPСоединение = Новый HTTPСоединение(СерверИсточник);
//	Исключение
//		// Вывести сообщение об ошибке соединения с сервером.
//		Сообщение.Текст = "Не удалось соединиться с сервером: " + СерверИсточник;
//		Сообщение.Сообщить();
//		Сообщение.Текст = ОписаниеОшибки();
//		Сообщение.Сообщить();
//		Возврат;
//	КонецПопытки;
//	// Создать HTTP-запрос на основе URL.
//	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
//	// Установить тело запроса из строки JSON.
//	Если ИмяМетода <> "DELETE" И ИмяМетода <> "GET" Тогда
//		HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаТелаЗапроса);
//	КонецЕсли;
//	Попытка
//		// Получить ответ сервера в виде объекта HTTPОтвет.
//		Результат = HTTPСоединение.ВызватьHTTPМетод(ИмяМетода, HTTPЗапрос);
//		// Получить содержимое ответа сервера в виде строки.
//		Сообщение.Текст = Результат.ПолучитьТелоКакСтроку();
//		Сообщение.Сообщить();
//	Исключение
//		// Вывести сообщение об ошибке при получении ответа сервера.
//		Сообщение.Текст = ОписаниеОшибки();
//		Сообщение.Сообщить();
//		Возврат;
//	КонецПопытки;
//КонецПроцедуры

&НаКлиенте
Процедура УдалитьДокумент(Команда)
	АдресРесурса = СокрЛП(Адрес);
	// Отправить запрос на сервер.
	ВыполнитьЗапрос("DELETE", АдресРесурса, "");
КонецПроцедуры

&НаКлиенте
Процедура ДанныеИзДокумента(Команда)
	СерверИсточник = "localhost";
	Сообщение = Новый СообщениеПользователю;
	Попытка
		// Создать HTTP-соединение с сервером localhost.
		HTTPСоединение = Новый HTTPСоединение(СерверИсточник);
	Исключение
		// Вывести сообщение об ошибке соединения с сервером.
		Сообщение.Текст = "Не удалось соединиться с сервером: " + СерверИсточник;
		Сообщение.Сообщить();
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат;
	КонецПопытки;
	// Сформировать строку URL.
	АдресРесурса = "/REST/odata/standard.odata/Document_ПриходнаяНакладная?$format=json";
	// Создать HTTP-запрос на основе URL.
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	Попытка
		// Получить ответ сервера в виде объекта HTTPОтвет.
		Результат = HTTPСоединение.Получить(HTTPЗапрос);
		// Получить содержимое ответа сервера в виде строки.
		Сообщение.Текст = Результат.ПолучитьТелоКакСтроку();
		Сообщение.Сообщить();
	Исключение
		// Вывести сообщение об ошибке при получении ответа сервера.
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат;
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеИзСправочника(Команда)
	СерверИсточник = "localhost";
	Сообщение = Новый СообщениеПользователю;
	Попытка
		// Создать HTTP-соединение с сервером localhost.
		HTTPСоединение = Новый HTTPСоединение(СерверИсточник);
	Исключение
		// Вывести сообщение об ошибке соединения с сервером.
		Сообщение.Текст = "Не удалось соединиться с сервером: " + СерверИсточник;
		Сообщение.Сообщить();
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат;
	КонецПопытки;
	// Сформировать строку URL.
	АдресРесурса = "/REST/odata/standard.odata/Document_ПриходнаяНакладная?$format=json";
		 //localhost/REST/odata/standard.odata/Document_ПриходнаяНакладная?$format=json
	// Создать HTTP-запрос на основе URL.
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	Попытка
		// Получить ответ сервера в виде объекта HTTPОтвет.
		Результат = HTTPСоединение.Получить(HTTPЗапрос);
		// Получить содержимое ответа сервера в виде строки.
		Сообщение.Текст = Результат.ПолучитьТелоКакСтроку();
		Сообщение.Сообщить();
	Исключение
		// Вывести сообщение об ошибке при получении ответа сервера.
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат;
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДанные(Команда)
	Сообщение = Новый СообщениеПользователю;
	// Сформировать строку URL.
	АдресРесурса = "/REST/odata/standard.odata/Catalog_Номенклатура?$format=json";
	// Получить строку JSON с добавляемыми данными.
	СтрокаТелаЗапроса = СформироватьДобавляемыеДанные();
	Сообщение.Текст = СтрокаТелаЗапроса;
	Сообщение.Сообщить();
	// Отправить запрос на сервер.
	ВыполнитьЗапрос("POST", АдресРесурса, СтрокаТелаЗапроса);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапрос(ИмяМетода, АдресРесурса, СтрокаТелаЗапроса)
	Сообщение = Новый СообщениеПользователю;
	// Установить имя сервера.
	СерверИсточник = "localhost";
	Попытка
		// Создать HTTP-соединение с сервером localhost.
		HTTPСоединение = Новый HTTPСоединение(СерверИсточник);
	Исключение
		// Вывести сообщение об ошибке соединения с сервером.
		Сообщение.Текст = "Не удалось соединиться с сервером: " + СерверИсточник;
		Сообщение.Сообщить();
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат;
	КонецПопытки;
	// Создать HTTP-запрос на основе URL.
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	// Установить тело запроса из строки JSON.
	Если ИмяМетода <> "DELETE" И ИмяМетода <> "GET" Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаТелаЗапроса);
	КонецЕсли;
	Попытка
		// Получить ответ сервера в виде объекта HTTPОтвет.
		Результат = HTTPСоединение.ВызватьHTTPМетод(ИмяМетода, HTTPЗапрос);
		//получить содержимое ответа сервера в виде строки
		Сообщение.Текст = Результат.ПолучитьТелоКакСтроку();
		Сообщение.Сообщить();
	Исключение
		// Вывести сообщение об ошибке при получении ответа сервера.
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат;
	КонецПопытки;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьДобавляемыеДанные()
	// Создать объект записи и записать строковое значение в строку JSON.
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	// Записать начало корневого объекта.
	Запись.ЗаписатьНачалоОбъекта();
	// Записать наименование новой должности.
	Запись.ЗаписатьИмяСвойства("Description");
	Запись.ЗаписатьЗначение("Тест");
	// Записать конец корневого объекта.
	Запись.ЗаписатьКонецОбъекта();
	СтрокаJSON = Запись.Закрыть();
	Возврат СтрокаJSON;
КонецФункции

&НаКлиенте
Процедура ИзменитьДанные(Команда)
	Сообщение = Новый СообщениеПользователю;
	// Сформировать строку URL.
	АдресРесурса = "/REST/odata/standard.odata/Catalog_Номенклатура(guid'9a448bfe-9de8-11eb-a834-b8868725c77a')?$format=json";
	// Получить строку JSON с изменяемыми данными.
	СтрокаТелаЗапроса = СформироватьИзменяемыеДанные();
	Сообщение.Текст = СтрокаТелаЗапроса;
	Сообщение.Сообщить();
	// Отправить запрос на сервер.
	ВыполнитьЗапрос("PATCH", АдресРесурса, СтрокаТелаЗапроса);
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьИзменяемыеДанные()
	// Создать объект записи и записать строковое значение в строку JSON.
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	// Записать начало корневого объекта.
	Запись.ЗаписатьНачалоОбъекта();
	// Изменить свойство Code.
	//Запись.ЗаписатьИмяСвойства("Code");
	//Запись.ЗаписатьЗначение("REST-0003");
	// Изменить свойство ДатаРождения.
	//Запись.ЗаписатьИмяСвойства("ДатаРождения");
	//Запись.ЗаписатьЗначение(ЗаписатьДатуJSON(ТекущаяДата()
	//, ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.УниверсальнаяДата));
	// Изменить свойство ссылочное поле Должность.
	//Запись.ЗаписатьИмяСвойства("Должность@odata.bind");
	//Запись.ЗаписатьЗначение("Catalog_Должности(guid’524ffe8a-789f-11e9-babb-642737df2048’)");
	// Записать конец корневого объекта.
	Запись.ЗаписатьИмяСвойства("Description");
	Запись.ЗаписатьЗначение("Лапоть New");

	Запись.ЗаписатьКонецОбъекта();
	СтрокаJSON = Запись.Закрыть();
	Возврат СтрокаJSON;
КонецФункции

&НаКлиенте
Процедура УдалитьДанные(Команда)
	// Сформировать строку URL.
	АдресРесурса = "/REST/odata/standard.odata/Catalog_Номенклатура(guid'dd8e343a-a526-11eb-a83d-b8868725c77a')?$format=json";
	// Отправить запрос на сервер.
	ВыполнитьЗапрос("DELETE", АдресРесурса, "");
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДанные(Команда)
	Сообщение = Новый СообщениеПользователю;
	// Сформировать строку URL.
	АдресРесурса = "/REST/odata/standard.odata/Document_ПриходнаяНакладная(guid'9a448c00-9de8-11eb-a834-b8868725c77a')?$format=json";
	// Получить строку JSON с изменяемыми данными.
	СтрокаТелаЗапроса = СформироватьИзменяемыеДанныеТЧ();
	// Отправить запрос на сервер.
	ВыполнитьЗапрос("PATCH", АдресРесурса, СтрокаТелаЗапроса);
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьИзменяемыеДанныеТЧ()
	// Создать объект записи и записать строковое значение в строку JSON.
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	// Записать начало корневого объекта.
	Запись.ЗаписатьНачалоОбъекта();
	// Изменить свойство Номер.
	Запись.ЗаписатьИмяСвойства("Number");
	Запись.ЗаписатьЗначение("000000777");
	// Изменить свойство Дата.
	Запись.ЗаписатьИмяСвойства("Date");
	Запись.ЗаписатьЗначение(ЗаписатьДатуJSON(ТекущаяДата()
	, ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.УниверсальнаяДата));
	// Изменить состав ТЧ Товары.
	Запись.ЗаписатьИмяСвойства("Товары@odata.type");
	Запись.ЗаписатьЗначение("Collection(StandardODATA.Document_ПриходнаяНакладная_Товары_RowType)");
	Запись.ЗаписатьИмяСвойства("Товары");
	Запись.ЗаписатьНачалоМассива();
	// записать полностью первую строку ТЧ.
	Запись.ЗаписатьНачалоОбъекта();
	Запись.ЗаписатьИмяСвойства("LineNumber");
	Запись.ЗаписатьЗначение("1");
	Запись.ЗаписатьИмяСвойства("Количество");
	Запись.ЗаписатьЗначение("1");
	//Запись.ЗаписатьИмяСвойства("Цена");
	//Запись.ЗаписатьЗначение("10000");
	//Запись.ЗаписатьИмяСвойства("Сумма");
	//Запись.ЗаписатьЗначение("10000");
	Запись.ЗаписатьИмяСвойства("Номенклатура_Key");
	Запись.ЗаписатьЗначение("f0f3ba0d-a0fe-11eb-a83d-b8868725c77a");
	Запись.ЗаписатьКонецОбъекта();
	// записать полностью вторую строку ТЧ.
	Запись.ЗаписатьНачалоОбъекта();
	Запись.ЗаписатьИмяСвойства("LineNumber");
	Запись.ЗаписатьЗначение("2");
	Запись.ЗаписатьИмяСвойства("Количество");
	Запись.ЗаписатьЗначение("2");
	//Запись.ЗаписатьИмяСвойства("Цена");
	//Запись.ЗаписатьЗначение("5000");
	//Запись.ЗаписатьИмяСвойства("Сумма");
	//Запись.ЗаписатьЗначение("10000");
	Запись.ЗаписатьИмяСвойства("Номенклатура_Key");
	Запись.ЗаписатьЗначение("f0f3ba0d-a0fe-11eb-a83d-b8868725c77a");
	Запись.ЗаписатьКонецОбъекта();
	Запись.ЗаписатьКонецМассива();
	// Записать конец корневого объекта.
	Запись.ЗаписатьКонецОбъекта();
	СтрокаJSON = Запись.Закрыть();
	Возврат СтрокаJSON;
КонецФункции
